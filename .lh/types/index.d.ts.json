{
    "sourceFile": "types/index.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1732135359780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1732135590582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,33 @@\n import type { TaskEvent } from \"nitropack/types\";\n \n-/**\n- * Metadata for a job.\n- */\n-export interface JobMeta {\n-  name: string;\n-  description?: string;\n-  schema?: ZodSchema; // Optional payload validation schema\n-}\n+declare global {\n+  /**\n+   * Metadata for a job.\n+   */\n+  export interface JobMeta {\n+    name: string;\n+    description?: string;\n+    schema?: ZodSchema; // Optional payload validation schema\n+  }\n \n-/**\n- * Extended TaskEvent to include job metadata.\n- */\n-export interface JobEvent extends TaskEvent {\n-  meta: JobMeta; // Attach metadata to the event\n-}\n+  /**\n+   * Extended TaskEvent to include job metadata.\n+   */\n \n-/**\n- * A job definition with lifecycle hooks and execution logic.\n- */\n-export interface Job<RT = unknown> {\n-  meta: JobMeta;\n-  beforeRun?: (event: JobEvent) => Promise<void> | void; // Logic to run before the main job\n-  afterRun?: (event: JobEvent, result: RT) => Promise<void> | void; // Logic to run after the main job\n-  onError?: (event: JobEvent, error: Error) => Promise<void> | void; // Error handling logic\n-  onComplete?: (event: JobEvent) => Promise<void> | void; // Cleanup logic to run regardless of success/failure\n-  run: (event: JobEvent) => Promise<RT>; // Main job execution logic\n-  hooks: Hookable<Record<string, any>, string>;\n+  export interface JobEvent extends TaskEvent {\n+    meta: JobMeta; // Attach metadata to the event\n+  }\n+\n+  /**\n+   * A job definition with lifecycle hooks and execution logic.\n+   */\n+  export interface Job<RT = unknown> {\n+    meta: JobMeta;\n+    beforeRun?: (event: JobEvent) => Promise<void> | void; // Logic to run before the main job\n+    afterRun?: (event: JobEvent, result: RT) => Promise<void> | void; // Logic to run after the main job\n+    onError?: (event: JobEvent, error: Error) => Promise<void> | void; // Error handling logic\n+    onComplete?: (event: JobEvent) => Promise<void> | void; // Cleanup logic to run regardless of success/failure\n+    run: (event: JobEvent) => Promise<RT>; // Main job execution logic\n+    hooks: Hookable<Record<string, any>, string>;\n+  }\n }\n"
                },
                {
                    "date": 1732135606614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n declare global {\n   /**\n    * Metadata for a job.\n    */\n-  export interface JobMeta {\n+  interface JobMeta {\n     name: string;\n     description?: string;\n     schema?: ZodSchema; // Optional payload validation schema\n   }\n@@ -13,16 +13,16 @@\n   /**\n    * Extended TaskEvent to include job metadata.\n    */\n \n-  export interface JobEvent extends TaskEvent {\n+  interface JobEvent extends TaskEvent {\n     meta: JobMeta; // Attach metadata to the event\n   }\n \n   /**\n    * A job definition with lifecycle hooks and execution logic.\n    */\n-  export interface Job<RT = unknown> {\n+  interface Job<RT = unknown> {\n     meta: JobMeta;\n     beforeRun?: (event: JobEvent) => Promise<void> | void; // Logic to run before the main job\n     afterRun?: (event: JobEvent, result: RT) => Promise<void> | void; // Logic to run after the main job\n     onError?: (event: JobEvent, error: Error) => Promise<void> | void; // Error handling logic\n@@ -30,4 +30,6 @@\n     run: (event: JobEvent) => Promise<RT>; // Main job execution logic\n     hooks: Hookable<Record<string, any>, string>;\n   }\n }\n+\n+export {};\n"
                },
                {
                    "date": 1732141705272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,32 +4,55 @@\n   /**\n    * Metadata for a job.\n    */\n   interface JobMeta {\n-    name: string;\n-    description?: string;\n-    schema?: ZodSchema; // Optional payload validation schema\n+    name: string; // Unique name of the job\n+    description?: string; // Optional description\n+    schema?: ZodSchema; // Optional schema for payload validation\n   }\n \n   /**\n-   * Extended TaskEvent to include job metadata.\n+   * Extended TaskEvent with metadata, payload, and context.\n    */\n-\n-  interface JobEvent extends TaskEvent {\n-    meta: JobMeta; // Attach metadata to the event\n+  interface JobEvent<\n+    Payload = Record<string, any>,\n+    Context = Record<string, any>\n+  > extends TaskEvent {\n+    meta: JobMeta;\n+    payload: Payload;\n+    context: Context;\n   }\n \n   /**\n-   * A job definition with lifecycle hooks and execution logic.\n+   * Middleware interface for jobs, allowing partial overrides of Job methods.\n    */\n-  interface Job<RT = unknown> {\n+  interface JobMiddleware<\n+    RT = unknown,\n+    Payload = Record<string, any>,\n+    Context = Record<string, any>\n+  > extends Partial<Job<RT, Payload, Context>> {}\n+\n+  /**\n+   * Main Job interface.\n+   */\n+  interface Job<\n+    RT = unknown,\n+    Payload = Record<string, any>,\n+    Context = Record<string, any>\n+  > {\n     meta: JobMeta;\n-    beforeRun?: (event: JobEvent) => Promise<void> | void; // Logic to run before the main job\n-    afterRun?: (event: JobEvent, result: RT) => Promise<void> | void; // Logic to run after the main job\n-    onError?: (event: JobEvent, error: Error) => Promise<void> | void; // Error handling logic\n-    onComplete?: (event: JobEvent) => Promise<void> | void; // Cleanup logic to run regardless of success/failure\n-    run: (event: JobEvent) => Promise<RT>; // Main job execution logic\n-    hooks: Hookable<Record<string, any>, string>;\n+    beforeRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n+    afterRun?: (\n+      event: JobEvent<Payload, Context>,\n+      result: RT\n+    ) => Promise<void> | void;\n+    onError?: (\n+      event: JobEvent<Payload, Context>,\n+      error: Error\n+    ) => Promise<void> | void;\n+    onComplete?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n+    run: (event: JobEvent<Payload, Context>) => Promise<RT>;\n+    middlewares?: JobMiddleware<RT, Payload, Context>[]; // Middleware array\n   }\n }\n \n export {};\n"
                },
                {
                    "date": 1732141728267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import type { TaskEvent } from \"nitropack/types\";\n+import type { ZodSchema } from \"zod\";\n \n declare global {\n   /**\n    * Metadata for a job.\n"
                },
                {
                    "date": 1732143777077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,25 @@\n \n   /**\n    * Middleware interface for jobs, allowing partial overrides of Job methods.\n    */\n-  interface JobMiddleware<\n+  export interface JobMiddleware<\n     RT = unknown,\n     Payload = Record<string, any>,\n     Context = Record<string, any>\n-  > extends Partial<Job<RT, Payload, Context>> {}\n+  > {\n+    beforeRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n+    run?: (event: JobEvent<Payload, Context>) => Promise<RT> | RT;\n+    afterRun?: (\n+      event: JobEvent<Payload, Context>,\n+      result: RT\n+    ) => Promise<void> | void;\n+    onError?: (\n+      event: JobEvent<Payload, Context>,\n+      error: Error\n+    ) => Promise<void> | void;\n+    onComplete?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n+  }\n \n   /**\n    * Main Job interface.\n    */\n"
                },
                {
                    "date": 1732144658963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import type { TaskEvent } from \"nitropack/types\";\n import type { ZodSchema } from \"zod\";\n \n declare global {\n+  type MutableResult<RT> = { value: RT };\n+\n   /**\n    * Metadata for a job.\n    */\n   interface JobMeta {\n"
                },
                {
                    "date": 1732144798609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n import type { TaskEvent } from \"nitropack/types\";\n import type { ZodSchema } from \"zod\";\n \n declare global {\n-  type MutableResult<RT> = { value: RT };\n-\n   /**\n    * Metadata for a job.\n    */\n   interface JobMeta {\n"
                },
                {
                    "date": 1732145504079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,9 @@\n     Context = Record<string, any>\n   > {\n     beforeRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n     run?: (event: JobEvent<Payload, Context>) => Promise<RT> | RT;\n-    afterRun?: (\n-      event: JobEvent<Payload, Context>,\n-      result: RT\n-    ) => Promise<void> | void;\n+    afterRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n     onError?: (\n       event: JobEvent<Payload, Context>,\n       error: Error\n     ) => Promise<void> | void;\n@@ -53,12 +50,9 @@\n     Context = Record<string, any>\n   > {\n     meta: JobMeta;\n     beforeRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n-    afterRun?: (\n-      event: JobEvent<Payload, Context>,\n-      result: RT\n-    ) => Promise<void> | void;\n+    afterRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n     onError?: (\n       event: JobEvent<Payload, Context>,\n       error: Error\n     ) => Promise<void> | void;\n"
                },
                {
                    "date": 1732213535276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,7 +59,71 @@\n     onComplete?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n     run: (event: JobEvent<Payload, Context>) => Promise<RT>;\n     middlewares?: JobMiddleware<RT, Payload, Context>[]; // Middleware array\n   }\n+\n+  /**\n+   * Metadata for a workflow.\n+   */\n+  interface WorkflowMeta {\n+    name: string; // Unique name of the workflow\n+    description?: string; // Optional description\n+    version?: string; // Optional version of the workflow\n+    schema?: ZodSchema; // Optional schema for payload validation\n+    jobs: string[]; // Array of job names in the workflow\n+  }\n+\n+  /**\n+   * Extended WorkflowEvent with metadata, payload, and context.\n+   */\n+  interface WorkflowEvent<\n+    Payload = Record<string, any>,\n+    Context = Record<string, any>\n+  > extends TaskEvent {\n+    meta: JobMeta;\n+    payload: Payload;\n+    context: Context;\n+  }\n+\n+  /**\n+   * Middleware interface for workflows, allowing partial overrides of Workflow methods.\n+   */\n+  interface WorkflowMiddleware<\n+    RT = unknown,\n+    Payload = Record<string, any>,\n+    Context = Record<string, any>\n+  > {\n+    beforeRun?: (event: WorkflowEvent<Payload, Context>) => Promise<void> | void;\n+    beforeJobRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n+    afterRun?: (event: WorkflowEvent<Payload, Context>) => Promise<void> | void;\n+    afterJobRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n+    onError?: (\n+      event: WorkflowEvent<Payload, Context>,\n+      error: Error\n+    ) => Promise<void> | void;\n+    onComplete?: (event: WorkflowEvent<Payload, Context>) => Promise<void> | void;\n+  }\n+\n+  /**\n+   * Main Workflow interface.\n+   */\n+  interface Workflow<\n+    RT = unknown,\n+    Payload = Record<string, any>,\n+    Context = Record<string, any>\n+  > {\n+    meta: WorkflowMeta;\n+    beforeRun?: (event: WorkflowEvent<Payload, Context>) => Promise<void> | void;\n+    beforeJobRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n+    afterRun?: (event: WorkflowEvent<Payload, Context>) => Promise<void> | void;\n+    afterJobRun?: (event: JobEvent<Payload, Context>) => Promise<void> | void;\n+    onError?: (\n+      event: WorkflowEvent<Payload, Context>,\n+      error: Error\n+    ) => Promise<void> | void;\n+    onComplete?: (event: WorkflowEvent<Payload, Context>) => Promise<void> | void;\n+    run: (event: WorkflowEvent<Payload, Context>) => Promise<RT>;\n+    middlewares?: WorkflowMiddleware<RT, Payload, Context>[]; // Middleware array\n+  }\n }\n \n export {};\n"
                },
                {
                    "date": 1732218079483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n     name: string; // Unique name of the workflow\n     description?: string; // Optional description\n     version?: string; // Optional version of the workflow\n     schema?: ZodSchema; // Optional schema for payload validation\n-    jobs: string[]; // Array of job names in the workflow\n+    jobs: (string | Job)[]; // Array of job names or job objects in the workflow\n   }\n \n   /**\n    * Extended WorkflowEvent with metadata, payload, and context.\n"
                }
            ],
            "date": 1732135359780,
            "name": "Commit-0",
            "content": "import type { TaskEvent } from \"nitropack/types\";\n\n/**\n * Metadata for a job.\n */\nexport interface JobMeta {\n  name: string;\n  description?: string;\n  schema?: ZodSchema; // Optional payload validation schema\n}\n\n/**\n * Extended TaskEvent to include job metadata.\n */\nexport interface JobEvent extends TaskEvent {\n  meta: JobMeta; // Attach metadata to the event\n}\n\n/**\n * A job definition with lifecycle hooks and execution logic.\n */\nexport interface Job<RT = unknown> {\n  meta: JobMeta;\n  beforeRun?: (event: JobEvent) => Promise<void> | void; // Logic to run before the main job\n  afterRun?: (event: JobEvent, result: RT) => Promise<void> | void; // Logic to run after the main job\n  onError?: (event: JobEvent, error: Error) => Promise<void> | void; // Error handling logic\n  onComplete?: (event: JobEvent) => Promise<void> | void; // Cleanup logic to run regardless of success/failure\n  run: (event: JobEvent) => Promise<RT>; // Main job execution logic\n  hooks: Hookable<Record<string, any>, string>;\n}\n"
        }
    ]
}